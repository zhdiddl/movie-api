plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

allprojects {
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
}


task jacocoRootReport(type: JacocoReport) {
    dependsOn(subprojects.collect { it.tasks.withType(Test) })

    additionalSourceDirs.setFrom(files(subprojects.collect { it.sourceSets.main.allSource.srcDirs }.flatten()))
    sourceDirectories.setFrom(files(subprojects.collect { it.sourceSets.main.allSource.srcDirs }.flatten()))
    classDirectories.setFrom(files(subprojects.collect { it.sourceSets.main.output }.flatten()))
    executionData.setFrom(files(subprojects.collect { it.tasks.withType(JacocoReport).collect { it.executionData } }.flatten()))

    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoRootReport"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.1" // 최신 Spring Boot BOM 유지
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy("jacocoTestReport") // 테스트 실행 후 JaCoCo 리포트 자동 생성
    }
}
